version: '3'

services:

  nginx:
    image: nginx:1.24-alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend_new
      - backend
    networks:
      - cortex
    # links:
    #   - frontend_new
    #   - backend
    ports:
      - 80:80
      - 443:443
      # - 3000:3000

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    ports:
      - "1337:1337"
    env_file: 
    - ./.env
    environment:
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
      STRAPI_BACKEND_URL: ${STRAPI_BACKEND_URL}
    # links:
    # - strapiDB:strapiDB
    volumes:
      - ./backend/config:/opt/app/config
      - ./backend/src:/opt/app/src
      - ./backend/package.json:/opt/package.json
      - ./backend/yarn.lock:/opt/yarn.lock
      - ./backend/.env:/opt/app/.env
      - ./backend/public/uploads:/opt/app/public/uploads
    #volumes:
      # Required to sync file changes.
      #- ../backend:/app
      # Required to not break node modules.
      #- /app/node_modules
      #- ./.env:/app/.env
    networks:
      - cortex
    depends_on:
      strapiDB:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://backend:1337/_health"] #  || exit 1
    #   interval: 1m
    #   timeout: 10s
    #   retries: 3
    #   # start_period: 40s
    #   # start_interval: 5s

  strapiDB:
   image: postgres:16-alpine
   container_name: strapiDB
   platform: linux/amd64
   restart: unless-stopped
   ports:
     - "5432:5432"
   env_file: 
    - ./.env
   environment:
     POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
     POSTGRES_USER: ${DATABASE_USERNAME}
     POSTGRES_DB: ${DATABASE_NAME}
     # PGDATA: "/var/lib/postgresql/data/pgdata"
   volumes:
    # - ../2. Init Database:/docker-entrypoint-initdb.d
    - ./cx_backup.sql:/cx_backup.sql
    - ./restore.sh:/docker-entrypoint-initdb.d/restore.sh
    - postgres-data:/var/lib/postgresql/data
   networks:
    - cortex
   healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  frontend_new:
    container_name: frontend_new
    build:
      context: ./frontend_new
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=${NODE_ENV}
      #   ENV_VARIABLE: ${ENV_VARIABLE}
      #   NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
    # ports:
    #   - "3000:3000"
    env_file: 
      - ./.env
    # environment:
    #   NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    #   NEXT_PUBLIC_STRAPI_URL: eee
    # volumes:
    #   # Required to sync file changes.
    #   - ./frontend_new:/app
    #   # Required for next to do it's thing.
    #   - /app/.next
    #   # Required to not break node modules.
    #   - /app/node_modules
    networks:
      - cortex
    depends_on:
      - backend
        # condition: service_healthy

volumes:
  postgres-data:
    # external: true
    #
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: C:\Program Files\PostgreSQL\16\data

networks:
  cortex:
    name: Cortex
    driver: bridge

